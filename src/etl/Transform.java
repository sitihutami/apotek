/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etl;

import data.Xml;
import java.io.IOException;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

/**
 *
 * @author ai
 */
public class Transform extends javax.swing.JDialog {
private java.awt.Frame f;
    /**
     * Creates new form Transform
     */
    public Transform(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        f=parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        conf = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        sup = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        prog = new javax.swing.JProgressBar();
        t = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TRANSFORMATION");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Minimum Confident"));

        conf.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.1d, 100.0d, 0.1d));
        conf.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confStateChanged(evt);
            }
        });

        jLabel1.setText("%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(conf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Minimum Support"));

        sup.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.1d, 100.0d, 0.1d));
        sup.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                supStateChanged(evt);
            }
        });

        jLabel2.setText("%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(sup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
        );

        t.setText("TRANSFORMASIKAN");
        t.setEnabled(false);
        t.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(prog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(t, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(t)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Xml.f.delete();
        hapusJejak();
    }//GEN-LAST:event_formWindowClosing

    private void tActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                jalan();
            }
        }).start();
        conf.setEnabled(false);
        sup.setEnabled(false);
        t.setEnabled(false);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
    }//GEN-LAST:event_tActionPerformed

    private void confStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_confStateChanged
        t.setEnabled(0<Float.parseFloat(""+conf.getValue())&&0<Float.parseFloat(""+sup.getValue()));
    }//GEN-LAST:event_confStateChanged

    private void supStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_supStateChanged
        t.setEnabled(0<Float.parseFloat(""+conf.getValue())&&0<Float.parseFloat(""+sup.getValue()));
    }//GEN-LAST:event_supStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner conf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar prog;
    private javax.swing.JSpinner sup;
    private javax.swing.JButton t;
    // End of variables declaration//GEN-END:variables

    private void jalan() {
        try {
            int s=(Xml.getLength()/2)+1;
            java.util.concurrent.ThreadPoolExecutor exe=new java.util.concurrent.ScheduledThreadPoolExecutor(s);
            for(int x=0;x<s;x++){
                final int i=x;
                exe.execute(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            iki(i);
                        } catch (ParserConfigurationException ex) {
                            Xml.hindar(ex);
                        } catch (SAXException ex) {
                            Xml.hindar(ex);
                        } catch (IOException ex) {
                            Xml.hindar(ex);
                        } catch (SQLException ex) {
                            Xml.hindar(ex);
                        } catch (TransformerException ex) {
                            Xml.hindar(ex);
                        }
                    }
                });while(25<=exe.getActiveCount()){}
                Thread.sleep(300);
            }while(0<exe.getActiveCount()){}
            next();
        } catch (ParserConfigurationException ex) {
            Xml.hindar(ex);
        } catch (SAXException ex) {
            Xml.hindar(ex);
        } catch (IOException ex) {
            Xml.hindar(ex);
        } catch (InterruptedException ex) {
            Xml.hindar(ex);
        }
    }

    private void progres(int x, int s) {
        int p=x*100;
        p/=s;
        prog.setValue(p);
    }

    @SuppressWarnings("UnnecessaryContinue")
    private void iki(int i) throws ParserConfigurationException, SAXException, IOException, SQLException, TransformerException {
        int s=Xml.getLength(),bny=new Analisis.SQL().bnyTransaksi();
        Xml.init(i);
        for(int x=0;x<s;x++){
            if(x==i)continue;
            Analisis.data a=Xml.getItem(i),b=Xml.getItem(x);
            float sync=Xml.c2(a.getKode_item(), b.getKode_item()),ca=a.getNilai(),cb=b.getNilai(),supe=sync*100/bny;
            if(supe>=Float.parseFloat(""+this.sup.getValue())){
                float confe=sync/ca*100;
                if(confe>=Float.parseFloat(conf.getValue().toString()))Xml.addTrans(a.getNama_item(),b.getNama_item(),i,confe,supe);
                confe=sync/cb*100;
                if(confe>=Float.parseFloat(conf.getValue().toString()))Xml.addTrans(b.getNama_item(),a.getNama_item(),i,confe,supe);
            }
        }progres(i,(Xml.getLength()/2)+1);
    }

    private void next() {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        JOptionPane.showMessageDialog(rootPane, "All done!");
        new etl.Load(f, rootPaneCheckingEnabled).setVisible(true);
        this.setVisible(false);
    }

    private void hapusJejak() {
        java.io.File d=new java.io.File(System.getProperty("user.home")+"/.analyzed/temp/");
        for(java.io.File f:d.listFiles())f.delete();
        d.delete();
    }
}
